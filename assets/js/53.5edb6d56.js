(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{376:function(t,a,s){"use strict";s.r(a);var r=s(15),e=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"three-js-shader-사용하기-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#three-js-shader-사용하기-1"}},[t._v("#")]),t._v(" Three.js Shader 사용하기 (1)")]),t._v(" "),a("p",[a("strong",[t._v("Three.js는 WebGL을 간편하게 사용하게 해주는 도구입니다.\n하지만 커스텀한 기능을 요구할 때 Shader을 사용해야할 때가 있습니다. "),a("br"),t._v("\n아래 튜토리얼에서 Three.js 에서 Shader를 어떻게 사용하는지 알아보겠습니다.")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/",target:"_blank",rel:"noopener noreferrer"}},[t._v("an-introduction-to-shaders-part-1"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("Shader 는 아래 두 가지 종류가 있습니다.")]),t._v(" "),a("ul",[a("li",[t._v("VertexShader")]),t._v(" "),a("li",[t._v("FragmentShader")])]),t._v(" "),a("h2",{attrs:{id:"vertexshader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#vertexshader"}},[t._v("#")]),t._v(" VertexShader")]),t._v(" "),a("ul",[a("li",[t._v("버텍스셰이더는 주로 물체의 정점 정보에 수학적인 연산을 함으로써 물체에 특별한 효과를 주는 데 쓰입니다.")]),t._v(" "),a("li",[t._v("버텍스셰이더는 반드시 gl_Position을 정의해야 합니다.")]),t._v(" "),a("li",[t._v("gl_Position은 정점을 화면상의 위치로 지정하는 4D float Vector 입니다.")]),t._v(" "),a("li",[t._v("실제로 우리는 3D 위치(x, y, z)를 2D 화면에 투영하고 있습니다.")]),t._v(" "),a("li",[t._v("Three.js 를 이용한다면 gl_Position을 간단하게 설정할 수 있습니다.")])]),t._v(" "),a("h2",{attrs:{id:"fragmentshader"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fragmentshader"}},[t._v("#")]),t._v(" FragmentShader")]),t._v(" "),a("ul",[a("li",[t._v("정점들이 2D 화면에 투영됬다면 사용할 색상, 텍스처, 조명도 필요합니다.")]),t._v(" "),a("li",[t._v("프레그먼트셰이더는 위 작업을 수행할 수 있는 4D float Vector 입니다.")]),t._v(" "),a("li",[t._v("프레그먼트셰이더는 반드시 gl_FragColor 변수를 설정하거나 버려야 합니다.")]),t._v(" "),a("li",[t._v("만약 삼각형을 형성하는 세 개의 정점이 존재하고, 그 삼각형 내의 픽셀을 그리기 위해 각 픽셀에 대한 데이터를 나타내는 것이 프레그먼트 입니다.")]),t._v(" "),a("li",[t._v("프레그먼트는 구성 정점에서 보간된 값을 가집니다. (빨간색 정점의 이웃이 파란색이라면 빨강,보라,파랑으로 보간되어 색상이 나타납니다.)")])]),t._v(" "),a("h2",{attrs:{id:"shader-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#shader-variables"}},[t._v("#")]),t._v(" Shader Variables")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Uniforms")]),t._v(": 버텍스셰이더와 프래그먼트셰이더로 보내지며 모든 프레임에 동일한 값을 가지는 변수입니다. (Ex. 빛의 위치)")]),t._v(" "),a("li",[a("strong",[t._v("Attributes")]),t._v(": 각 정점에 적용되는 값으로 버텍스셰이더에서만 사용 가능합니다. 각 정점과 일대일 관계를 갖습니다.")]),t._v(" "),a("li",[a("strong",[t._v("Varyings")]),t._v(": 버텍스셰이더에서 선언된 변수로, 프로그래먼트셰이더와 공유합니다. 이를 위해 버텍스셰이더와 프래그먼트셰이더에서 동일한 형식과 이름의 가변 변수로 선언해야 합니다. (가장 대표적인 예시는 법선입니다. 법선은 조명 계산에 사용될 수 있기 때문입니다.)")])]),t._v(" "),a("h2",{attrs:{id:"구현"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#구현"}},[t._v("#")]),t._v(" 구현")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" vertex "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    void main() {\n        gl_Position = projectionMatrix * modelViewMatrix  * vec4(position,1.0);\n    }\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" frag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    void main() {\n        gl_FragColor = vec4(0.0, 0.5, 1.0, 1.0); // R, G, B, A\n    }\n")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" geometry "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BoxGeometry")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" material "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ShaderMaterial")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("vertexShader")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" vertex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("fragmentShader")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" frag\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" cube "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("THREE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Mesh")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" geometry"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" material "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nthreeLayer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("scene"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" cube "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n")])])]),a("Three-shader01-Ex01"),t._v(" "),a("br"),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("https://aerotwist.com/tutorials/an-introduction-to-shaders-part-1/\nhttps://ko.wikipedia.org/wiki/%EB%B2%84%ED%85%8D%EC%8A%A4_%EC%85%B0%EC%9D%B4%EB%8D%94")])]),t._v(" "),a("Comment")],1)}),[],!1,null,null,null);a.default=e.exports}}]);